
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id
  nationalId String
  firstName String
  lastName String
  name          String
  email         String
  phone String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@unique([nationalId])
  @@unique([phone])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Deal {
  id             String   @id @default(uuid())
  buyerEmail     String
  sellerEmail    String
  amount         Float
  currency       String    @default("lari")
  name         String

  sellerReceivable Float
  buyerPay Float
  whoPays WhoPays

  shippingDays   Int?      // for physical
  inspectionDays Int

  status         DealStatus @default(pending)

  createdAt      DateTime @default(now())
  shippedAt      DateTime?
  deliveredAt    DateTime?
  completedAt    DateTime?

  // Relations
  Dispute        Dispute?
  items          Item[] 
  invitedUser      InvitedUser?
}

model Item {
  id          String   @id @default(uuid())
  dealId      String
  name        String
  description String?
  price       Float
  category String

  deal        Deal     @relation(fields: [dealId], references: [id])
}


model InvitedUser {
  id               String   @id @default(uuid())
  email            String   @unique
  invitedAt        DateTime @default(now())
  createdAccountAt DateTime?

  dealId           String   @unique  
  deal             Deal     @relation(fields: [dealId], references: [id])
}

enum DealStatus {
  pending
  shipped
  delivered
  completed
  disputed
}

enum DealType {
  physical
  digital
}

enum WhoPays {
  buyer
  seller
  equal
}

model Dispute {
  id        String   @id @default(uuid())
  dealId    String   @unique
  reason    String
  createdAt DateTime @default(now())

  Deal Deal @relation(fields: [dealId], references: [id])
}
